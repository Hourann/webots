/* automatically generated by rust-bindgen */

pub const INFINITY: f64 = ::std::f64::INFINITY;
pub const WB_ANGULAR: u32 = 0;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_VERS_1050: u32 = 0;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101204;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const WB_STDOUT: u32 = 0;
pub const WB_STDERR: u32 = 1;
pub const WB_IMAGE_RGB: u32 = 3;
pub const WB_IMAGE_RGBA: u32 = 4;
pub const WB_IMAGE_ARGB: u32 = 5;
pub const WB_IMAGE_BGRA: u32 = 6;
pub const WB_CHANNEL_BROADCAST: i32 = -1;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 0;
pub const WB_SUPERVISOR_MOVIE_READY: u32 = 0;
pub const WB_SUPERVISOR_MOVIE_RECORDING: u32 = 1;
pub const WB_SUPERVISOR_MOVIE_SAVING: u32 = 2;
pub const WB_SUPERVISOR_MOVIE_WRITE_ERROR: u32 = 3;
pub const WB_SUPERVISOR_MOVIE_ENCODING_ERROR: u32 = 4;
pub const WB_SUPERVISOR_MOVIE_SIMULATION_ERROR: u32 = 5;
pub type WbDeviceTag = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbImageStructPrivate {
    _unused: [u8; 0],
}
pub type WbImageRef = *mut WbImageStructPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbMotionStructPrivate {
    _unused: [u8; 0],
}
pub type WbMotionRef = *mut WbMotionStructPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbNodeStructPrivate {
    _unused: [u8; 0],
}
pub type WbNodeRef = *mut WbNodeStructPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbFieldStructPrivate {
    _unused: [u8; 0],
}
pub type WbFieldRef = *mut WbFieldStructPrivate;
pub const WbJointType_WB_ROTATIONAL: WbJointType = 0;
pub const WbJointType_WB_LINEAR: WbJointType = 1;
pub type WbJointType = u32;
extern "C" {
    #[link_name = "\u{1}_wb_accelerometer_enable"]
    pub fn wb_accelerometer_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_accelerometer_disable"]
    pub fn wb_accelerometer_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_accelerometer_get_sampling_period"]
    pub fn wb_accelerometer_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_accelerometer_get_values"]
    pub fn wb_accelerometer_get_values(tag: WbDeviceTag) -> *const f64;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    #[link_name = "\u{1}___math_errhandling"]
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___fpclassifyf"]
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___fpclassifyd"]
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___fpclassify"]
    pub fn __fpclassify(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_acosf"]
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_acos"]
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_acosl"]
    pub fn acosl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_asinf"]
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_asin"]
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_asinl"]
    pub fn asinl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_atanf"]
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_atan"]
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atanl"]
    pub fn atanl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_atan2f"]
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_atan2"]
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atan2l"]
    pub fn atan2l(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_cosf"]
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_cos"]
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_cosl"]
    pub fn cosl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_sinf"]
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_sin"]
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sinl"]
    pub fn sinl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_tanf"]
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_tan"]
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tanl"]
    pub fn tanl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_acoshf"]
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_acosh"]
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_acoshl"]
    pub fn acoshl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_asinhf"]
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_asinh"]
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_asinhl"]
    pub fn asinhl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_atanhf"]
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_atanh"]
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atanhl"]
    pub fn atanhl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_coshf"]
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_cosh"]
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_coshl"]
    pub fn coshl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_sinhf"]
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_sinh"]
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sinhl"]
    pub fn sinhl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_tanhf"]
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_tanh"]
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tanhl"]
    pub fn tanhl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_expf"]
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_exp"]
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_expl"]
    pub fn expl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_exp2f"]
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_exp2"]
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_exp2l"]
    pub fn exp2l(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_expm1f"]
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_expm1"]
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_expm1l"]
    pub fn expm1l(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_logf"]
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log"]
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_logl"]
    pub fn logl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_log10f"]
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log10"]
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log10l"]
    pub fn log10l(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_log2f"]
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log2"]
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log2l"]
    pub fn log2l(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_log1pf"]
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log1p"]
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log1pl"]
    pub fn log1pl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_logbf"]
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_logb"]
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_logbl"]
    pub fn logbl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_modff"]
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_modf"]
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_modfl"]
    pub fn modfl(arg1: u128, arg2: *mut u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_ldexpf"]
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ldexp"]
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ldexpl"]
    pub fn ldexpl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_frexpf"]
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_frexp"]
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_frexpl"]
    pub fn frexpl(arg1: u128, arg2: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_ilogbf"]
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ilogb"]
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ilogbl"]
    pub fn ilogbl(arg1: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scalbnf"]
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_scalbn"]
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_scalbnl"]
    pub fn scalbnl(arg1: u128, arg2: ::std::os::raw::c_int) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_scalblnf"]
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_scalbln"]
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_scalblnl"]
    pub fn scalblnl(arg1: u128, arg2: ::std::os::raw::c_long) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_fabsf"]
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fabs"]
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fabsl"]
    pub fn fabsl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_cbrtf"]
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_cbrt"]
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_cbrtl"]
    pub fn cbrtl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_hypotf"]
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_hypot"]
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_hypotl"]
    pub fn hypotl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_powf"]
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_pow"]
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_powl"]
    pub fn powl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_sqrtf"]
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_sqrt"]
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sqrtl"]
    pub fn sqrtl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_erff"]
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_erf"]
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_erfl"]
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_erfcf"]
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_erfc"]
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_erfcl"]
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_lgammaf"]
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_lgamma"]
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_lgammal"]
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_tgammaf"]
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_tgamma"]
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tgammal"]
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_ceilf"]
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ceil"]
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ceill"]
    pub fn ceill(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_floorf"]
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_floor"]
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_floorl"]
    pub fn floorl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_nearbyintf"]
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nearbyint"]
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nearbyintl"]
    pub fn nearbyintl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_rintf"]
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_rint"]
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_rintl"]
    pub fn rintl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_lrintf"]
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lrint"]
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lrintl"]
    pub fn lrintl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_roundf"]
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_round"]
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_roundl"]
    pub fn roundl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_lroundf"]
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lround"]
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lroundl"]
    pub fn lroundl(arg1: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_llrintf"]
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llrint"]
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llrintl"]
    pub fn llrintl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llroundf"]
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llround"]
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llroundl"]
    pub fn llroundl(arg1: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_truncf"]
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_trunc"]
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_truncl"]
    pub fn truncl(arg1: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_fmodf"]
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fmod"]
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmodl"]
    pub fn fmodl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_remainderf"]
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_remainder"]
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_remainderl"]
    pub fn remainderl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_remquof"]
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_remquo"]
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_remquol"]
    pub fn remquol(arg1: u128, arg2: u128, arg3: *mut ::std::os::raw::c_int) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_copysignf"]
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_copysign"]
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_copysignl"]
    pub fn copysignl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_nanf"]
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nan"]
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nanl"]
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_nextafterf"]
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nextafter"]
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nextafterl"]
    pub fn nextafterl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_nexttoward"]
    pub fn nexttoward(arg1: f64, arg2: u128) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nexttowardf"]
    pub fn nexttowardf(arg1: f32, arg2: u128) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nexttowardl"]
    pub fn nexttowardl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_fdimf"]
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fdim"]
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fdiml"]
    pub fn fdiml(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_fmaxf"]
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fmax"]
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmaxl"]
    pub fn fmaxl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_fminf"]
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fmin"]
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fminl"]
    pub fn fminl(arg1: u128, arg2: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}_fmaf"]
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fma"]
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmal"]
    pub fn fmal(arg1: u128, arg2: u128, arg3: u128) -> u128;
}
extern "C" {
    #[link_name = "\u{1}___inff"]
    pub fn __inff() -> f32;
}
extern "C" {
    #[link_name = "\u{1}___inf"]
    pub fn __inf() -> f64;
}
extern "C" {
    #[link_name = "\u{1}___infl"]
    pub fn __infl() -> u128;
}
extern "C" {
    #[link_name = "\u{1}___nan"]
    pub fn __nan() -> f32;
}
extern "C" {
    #[link_name = "\u{1}___exp10f"]
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___exp10"]
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}___cospif"]
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___cospi"]
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}___sinpif"]
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___sinpi"]
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}___tanpif"]
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___tanpi"]
    pub fn __tanpi(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_j0"]
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_j1"]
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_jn"]
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_y0"]
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_y1"]
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_yn"]
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_scalb"]
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_signgam"]
    pub static mut signgam: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rinttol"]
    pub fn rinttol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_roundtol"]
    pub fn roundtol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_drem"]
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_finite"]
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gamma"]
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_significand"]
    pub fn significand(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(
        ::std::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::std::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).retval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(retval)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_matherr"]
    pub fn matherr(arg1: *mut exception) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_brake_set_damping_constant"]
    pub fn wb_brake_set_damping_constant(tag: WbDeviceTag, damping_constant: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_brake_get_type"]
    pub fn wb_brake_get_type(tag: WbDeviceTag) -> WbJointType;
}
extern "C" {
    #[link_name = "\u{1}_wb_brake_get_motor"]
    pub fn wb_brake_get_motor(tag: WbDeviceTag) -> WbDeviceTag;
}
extern "C" {
    #[link_name = "\u{1}_wb_brake_get_position_sensor"]
    pub fn wb_brake_get_position_sensor(tag: WbDeviceTag) -> WbDeviceTag;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbCameraRecognitionObject {
    pub id: ::std::os::raw::c_int,
    pub position: [f64; 3usize],
    pub orientation: [f64; 4usize],
    pub size: [f64; 2usize],
    pub position_on_image: [::std::os::raw::c_int; 2usize],
    pub size_on_image: [::std::os::raw::c_int; 2usize],
    pub number_of_colors: ::std::os::raw::c_int,
    pub colors: *mut f64,
    pub model: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_WbCameraRecognitionObject() {
    assert_eq!(
        ::std::mem::size_of::<WbCameraRecognitionObject>(),
        120usize,
        concat!("Size of: ", stringify!(WbCameraRecognitionObject))
    );
    assert_eq!(
        ::std::mem::align_of::<WbCameraRecognitionObject>(),
        8usize,
        concat!("Alignment of ", stringify!(WbCameraRecognitionObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbCameraRecognitionObject>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).position as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).orientation as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(orientation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbCameraRecognitionObject>())).size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).position_on_image as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(position_on_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).size_on_image as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(size_on_image)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).number_of_colors as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(number_of_colors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbCameraRecognitionObject>())).colors as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(colors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbCameraRecognitionObject>())).model as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WbCameraRecognitionObject),
            "::",
            stringify!(model)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_enable"]
    pub fn wb_camera_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_disable"]
    pub fn wb_camera_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_sampling_period"]
    pub fn wb_camera_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_image"]
    pub fn wb_camera_get_image(tag: WbDeviceTag) -> *const ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_width"]
    pub fn wb_camera_get_width(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_height"]
    pub fn wb_camera_get_height(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_fov"]
    pub fn wb_camera_get_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_max_fov"]
    pub fn wb_camera_get_max_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_min_fov"]
    pub fn wb_camera_get_min_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_set_fov"]
    pub fn wb_camera_set_fov(tag: WbDeviceTag, fov: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_focal_length"]
    pub fn wb_camera_get_focal_length(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_focal_distance"]
    pub fn wb_camera_get_focal_distance(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_max_focal_distance"]
    pub fn wb_camera_get_max_focal_distance(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_min_focal_distance"]
    pub fn wb_camera_get_min_focal_distance(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_set_focal_distance"]
    pub fn wb_camera_set_focal_distance(tag: WbDeviceTag, focal_distance: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_get_near"]
    pub fn wb_camera_get_near(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_save_image"]
    pub fn wb_camera_save_image(
        tag: WbDeviceTag,
        filename: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_has_recognition"]
    pub fn wb_camera_has_recognition(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_recognition_enable"]
    pub fn wb_camera_recognition_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_recognition_disable"]
    pub fn wb_camera_recognition_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_recognition_get_sampling_period"]
    pub fn wb_camera_recognition_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_recognition_get_number_of_objects"]
    pub fn wb_camera_recognition_get_number_of_objects(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_camera_recognition_get_objects"]
    pub fn wb_camera_recognition_get_objects(tag: WbDeviceTag) -> *const WbCameraRecognitionObject;
}
extern "C" {
    #[link_name = "\u{1}_wb_compass_enable"]
    pub fn wb_compass_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_compass_disable"]
    pub fn wb_compass_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_compass_get_sampling_period"]
    pub fn wb_compass_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_compass_get_values"]
    pub fn wb_compass_get_values(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_connector_enable_presence"]
    pub fn wb_connector_enable_presence(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_connector_disable_presence"]
    pub fn wb_connector_disable_presence(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_connector_get_presence_sampling_period"]
    pub fn wb_connector_get_presence_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_connector_get_presence"]
    pub fn wb_connector_get_presence(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_connector_lock"]
    pub fn wb_connector_lock(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_connector_unlock"]
    pub fn wb_connector_unlock(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_console_print"]
    pub fn wb_console_print(text: *const ::std::os::raw::c_char, stream: ::std::os::raw::c_int);
}
pub const WbNodeType_WB_NODE_NO_NODE: WbNodeType = 0;
pub const WbNodeType_WB_NODE_APPEARANCE: WbNodeType = 1;
pub const WbNodeType_WB_NODE_BACKGROUND: WbNodeType = 2;
pub const WbNodeType_WB_NODE_BOX: WbNodeType = 3;
pub const WbNodeType_WB_NODE_CAPSULE: WbNodeType = 4;
pub const WbNodeType_WB_NODE_COLOR: WbNodeType = 5;
pub const WbNodeType_WB_NODE_CONE: WbNodeType = 6;
pub const WbNodeType_WB_NODE_COORDINATE: WbNodeType = 7;
pub const WbNodeType_WB_NODE_CYLINDER: WbNodeType = 8;
pub const WbNodeType_WB_NODE_DIRECTIONAL_LIGHT: WbNodeType = 9;
pub const WbNodeType_WB_NODE_ELEVATION_GRID: WbNodeType = 10;
pub const WbNodeType_WB_NODE_FOG: WbNodeType = 11;
pub const WbNodeType_WB_NODE_GROUP: WbNodeType = 12;
pub const WbNodeType_WB_NODE_IMAGE_TEXTURE: WbNodeType = 13;
pub const WbNodeType_WB_NODE_INDEXED_FACE_SET: WbNodeType = 14;
pub const WbNodeType_WB_NODE_INDEXED_LINE_SET: WbNodeType = 15;
pub const WbNodeType_WB_NODE_MATERIAL: WbNodeType = 16;
pub const WbNodeType_WB_NODE_MUSCLE: WbNodeType = 17;
pub const WbNodeType_WB_NODE_PBR_APPEARANCE: WbNodeType = 18;
pub const WbNodeType_WB_NODE_PLANE: WbNodeType = 19;
pub const WbNodeType_WB_NODE_POINT_LIGHT: WbNodeType = 20;
pub const WbNodeType_WB_NODE_POINT_SET: WbNodeType = 21;
pub const WbNodeType_WB_NODE_SHAPE: WbNodeType = 22;
pub const WbNodeType_WB_NODE_SPHERE: WbNodeType = 23;
pub const WbNodeType_WB_NODE_SPOT_LIGHT: WbNodeType = 24;
pub const WbNodeType_WB_NODE_TEXTURE_COORDINATE: WbNodeType = 25;
pub const WbNodeType_WB_NODE_TEXTURE_TRANSFORM: WbNodeType = 26;
pub const WbNodeType_WB_NODE_TRANSFORM: WbNodeType = 27;
pub const WbNodeType_WB_NODE_VIEWPOINT: WbNodeType = 28;
pub const WbNodeType_WB_NODE_ROBOT: WbNodeType = 29;
pub const WbNodeType_WB_NODE_DIFFERENTIAL_WHEELS: WbNodeType = 30;
pub const WbNodeType_WB_NODE_ACCELEROMETER: WbNodeType = 31;
pub const WbNodeType_WB_NODE_BRAKE: WbNodeType = 32;
pub const WbNodeType_WB_NODE_CAMERA: WbNodeType = 33;
pub const WbNodeType_WB_NODE_COMPASS: WbNodeType = 34;
pub const WbNodeType_WB_NODE_CONNECTOR: WbNodeType = 35;
pub const WbNodeType_WB_NODE_DISPLAY: WbNodeType = 36;
pub const WbNodeType_WB_NODE_DISTANCE_SENSOR: WbNodeType = 37;
pub const WbNodeType_WB_NODE_EMITTER: WbNodeType = 38;
pub const WbNodeType_WB_NODE_GPS: WbNodeType = 39;
pub const WbNodeType_WB_NODE_GYRO: WbNodeType = 40;
pub const WbNodeType_WB_NODE_INERTIAL_UNIT: WbNodeType = 41;
pub const WbNodeType_WB_NODE_LED: WbNodeType = 42;
pub const WbNodeType_WB_NODE_LIDAR: WbNodeType = 43;
pub const WbNodeType_WB_NODE_LIGHT_SENSOR: WbNodeType = 44;
pub const WbNodeType_WB_NODE_LINEAR_MOTOR: WbNodeType = 45;
pub const WbNodeType_WB_NODE_PEN: WbNodeType = 46;
pub const WbNodeType_WB_NODE_POSITION_SENSOR: WbNodeType = 47;
pub const WbNodeType_WB_NODE_PROPELLER: WbNodeType = 48;
pub const WbNodeType_WB_NODE_RADAR: WbNodeType = 49;
pub const WbNodeType_WB_NODE_RANGE_FINDER: WbNodeType = 50;
pub const WbNodeType_WB_NODE_RECEIVER: WbNodeType = 51;
pub const WbNodeType_WB_NODE_ROTATIONAL_MOTOR: WbNodeType = 52;
pub const WbNodeType_WB_NODE_SPEAKER: WbNodeType = 53;
pub const WbNodeType_WB_NODE_TOUCH_SENSOR: WbNodeType = 54;
pub const WbNodeType_WB_NODE_BALL_JOINT: WbNodeType = 55;
pub const WbNodeType_WB_NODE_BALL_JOINT_PARAMETERS: WbNodeType = 56;
pub const WbNodeType_WB_NODE_CHARGER: WbNodeType = 57;
pub const WbNodeType_WB_NODE_CONTACT_PROPERTIES: WbNodeType = 58;
pub const WbNodeType_WB_NODE_CUBEMAP: WbNodeType = 59;
pub const WbNodeType_WB_NODE_DAMPING: WbNodeType = 60;
pub const WbNodeType_WB_NODE_FLUID: WbNodeType = 61;
pub const WbNodeType_WB_NODE_FOCUS: WbNodeType = 62;
pub const WbNodeType_WB_NODE_HINGE_JOINT: WbNodeType = 63;
pub const WbNodeType_WB_NODE_HINGE_JOINT_PARAMETERS: WbNodeType = 64;
pub const WbNodeType_WB_NODE_HINGE_2_JOINT: WbNodeType = 65;
pub const WbNodeType_WB_NODE_IMMERSION_PROPERTIES: WbNodeType = 66;
pub const WbNodeType_WB_NODE_JOINT_PARAMETERS: WbNodeType = 67;
pub const WbNodeType_WB_NODE_LENS: WbNodeType = 68;
pub const WbNodeType_WB_NODE_LENS_FLARE: WbNodeType = 69;
pub const WbNodeType_WB_NODE_PHYSICS: WbNodeType = 70;
pub const WbNodeType_WB_NODE_RECOGNITION: WbNodeType = 71;
pub const WbNodeType_WB_NODE_SLIDER_JOINT: WbNodeType = 72;
pub const WbNodeType_WB_NODE_SLOT: WbNodeType = 73;
pub const WbNodeType_WB_NODE_SOLID: WbNodeType = 74;
pub const WbNodeType_WB_NODE_SOLID_REFERENCE: WbNodeType = 75;
pub const WbNodeType_WB_NODE_TRACK: WbNodeType = 76;
pub const WbNodeType_WB_NODE_TRACK_WHEEL: WbNodeType = 77;
pub const WbNodeType_WB_NODE_WORLD_INFO: WbNodeType = 78;
pub const WbNodeType_WB_NODE_ZOOM: WbNodeType = 79;
pub const WbNodeType_WB_NODE_MICROPHONE: WbNodeType = 80;
pub const WbNodeType_WB_NODE_RADIO: WbNodeType = 81;
pub const WbNodeType_WB_NODE_SKIN: WbNodeType = 82;
pub type WbNodeType = u32;
extern "C" {
    #[link_name = "\u{1}_wb_node_get_name"]
    pub fn wb_node_get_name(t: WbNodeType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_device_get_name"]
    pub fn wb_device_get_name(dt: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_device_get_model"]
    pub fn wb_device_get_model(dt: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_device_get_node_type"]
    pub fn wb_device_get_node_type(dt: WbDeviceTag) -> WbNodeType;
}
extern "C" {
    #[link_name = "\u{1}_wb_device_get_type"]
    pub fn wb_device_get_type(dt: WbDeviceTag) -> WbNodeType;
}
extern "C" {
    #[link_name = "\u{1}_wb_differential_wheels_set_speed"]
    pub fn wb_differential_wheels_set_speed(left: f64, right: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_differential_wheels_get_left_speed"]
    pub fn wb_differential_wheels_get_left_speed() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_differential_wheels_get_right_speed"]
    pub fn wb_differential_wheels_get_right_speed() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_differential_wheels_get_max_speed"]
    pub fn wb_differential_wheels_get_max_speed() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_differential_wheels_get_speed_unit"]
    pub fn wb_differential_wheels_get_speed_unit() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_differential_wheels_enable_encoders"]
    pub fn wb_differential_wheels_enable_encoders(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_differential_wheels_disable_encoders"]
    pub fn wb_differential_wheels_disable_encoders();
}
extern "C" {
    #[link_name = "\u{1}_wb_differential_wheels_get_encoders_sampling_period"]
    pub fn wb_differential_wheels_get_encoders_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_differential_wheels_get_left_encoder"]
    pub fn wb_differential_wheels_get_left_encoder() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_differential_wheels_get_right_encoder"]
    pub fn wb_differential_wheels_get_right_encoder() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_differential_wheels_set_encoders"]
    pub fn wb_differential_wheels_set_encoders(left: f64, right: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_display_get_width"]
    pub fn wb_display_get_width(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_display_get_height"]
    pub fn wb_display_get_height(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_display_set_color"]
    pub fn wb_display_set_color(tag: WbDeviceTag, color: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_display_set_alpha"]
    pub fn wb_display_set_alpha(tag: WbDeviceTag, alpha: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_display_set_opacity"]
    pub fn wb_display_set_opacity(tag: WbDeviceTag, opacity: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_display_set_font"]
    pub fn wb_display_set_font(
        tag: WbDeviceTag,
        font: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        anti_aliasing: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_display_attach_camera"]
    pub fn wb_display_attach_camera(tag: WbDeviceTag, camera_tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_display_detach_camera"]
    pub fn wb_display_detach_camera(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_display_draw_pixel"]
    pub fn wb_display_draw_pixel(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_display_draw_line"]
    pub fn wb_display_draw_line(
        tag: WbDeviceTag,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_display_draw_rectangle"]
    pub fn wb_display_draw_rectangle(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_display_draw_oval"]
    pub fn wb_display_draw_oval(
        tag: WbDeviceTag,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_display_draw_polygon"]
    pub fn wb_display_draw_polygon(
        tag: WbDeviceTag,
        x: *const ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_display_draw_text"]
    pub fn wb_display_draw_text(
        tag: WbDeviceTag,
        text: *const ::std::os::raw::c_char,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_display_fill_rectangle"]
    pub fn wb_display_fill_rectangle(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_display_fill_oval"]
    pub fn wb_display_fill_oval(
        tag: WbDeviceTag,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_display_fill_polygon"]
    pub fn wb_display_fill_polygon(
        tag: WbDeviceTag,
        x: *const ::std::os::raw::c_int,
        y: *const ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_display_image_new"]
    pub fn wb_display_image_new(
        tag: WbDeviceTag,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        data: *const ::std::os::raw::c_void,
        format: ::std::os::raw::c_int,
    ) -> WbImageRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_display_image_copy"]
    pub fn wb_display_image_copy(
        tag: WbDeviceTag,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> WbImageRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_display_image_load"]
    pub fn wb_display_image_load(
        tag: WbDeviceTag,
        filename: *const ::std::os::raw::c_char,
    ) -> WbImageRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_display_image_delete"]
    pub fn wb_display_image_delete(tag: WbDeviceTag, ir: WbImageRef);
}
extern "C" {
    #[link_name = "\u{1}_wb_display_image_paste"]
    pub fn wb_display_image_paste(
        tag: WbDeviceTag,
        ir: WbImageRef,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        blend: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_display_image_save"]
    pub fn wb_display_image_save(
        tag: WbDeviceTag,
        ir: WbImageRef,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_distance_sensor_enable"]
    pub fn wb_distance_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_distance_sensor_disable"]
    pub fn wb_distance_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_distance_sensor_get_sampling_period"]
    pub fn wb_distance_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_distance_sensor_get_value"]
    pub fn wb_distance_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_distance_sensor_get_max_value"]
    pub fn wb_distance_sensor_get_max_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_distance_sensor_get_min_value"]
    pub fn wb_distance_sensor_get_min_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_distance_sensor_get_aperture"]
    pub fn wb_distance_sensor_get_aperture(tag: WbDeviceTag) -> f64;
}
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_GENERIC: WbDistanceSensorType = 0;
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_INFRA_RED: WbDistanceSensorType = 1;
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_SONAR: WbDistanceSensorType = 2;
pub const WbDistanceSensorType_WB_DISTANCE_SENSOR_LASER: WbDistanceSensorType = 3;
pub type WbDistanceSensorType = u32;
extern "C" {
    #[link_name = "\u{1}_wb_distance_sensor_get_type"]
    pub fn wb_distance_sensor_get_type(tag: WbDeviceTag) -> WbDistanceSensorType;
}
extern "C" {
    #[link_name = "\u{1}_wb_emitter_send"]
    pub fn wb_emitter_send(
        tag: WbDeviceTag,
        data: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_emitter_get_buffer_size"]
    pub fn wb_emitter_get_buffer_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_emitter_set_channel"]
    pub fn wb_emitter_set_channel(tag: WbDeviceTag, channel: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_emitter_get_channel"]
    pub fn wb_emitter_get_channel(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_emitter_get_range"]
    pub fn wb_emitter_get_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_emitter_set_range"]
    pub fn wb_emitter_set_range(tag: WbDeviceTag, range: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_gps_enable"]
    pub fn wb_gps_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_gps_disable"]
    pub fn wb_gps_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_gps_get_sampling_period"]
    pub fn wb_gps_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_gps_get_speed"]
    pub fn wb_gps_get_speed(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_gps_get_values"]
    pub fn wb_gps_get_values(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_gps_convert_to_degrees_minutes_seconds"]
    pub fn wb_gps_convert_to_degrees_minutes_seconds(
        decimal_degrees: f64,
    ) -> *const ::std::os::raw::c_char;
}
pub const WbGpsCoordinateSystem_WB_GPS_LOCAL_COORDINATE: WbGpsCoordinateSystem = 0;
pub const WbGpsCoordinateSystem_WB_GPS_WGS84_COORDINATE: WbGpsCoordinateSystem = 1;
pub type WbGpsCoordinateSystem = u32;
extern "C" {
    #[link_name = "\u{1}_wb_gps_get_coordinate_system"]
    pub fn wb_gps_get_coordinate_system(tag: WbDeviceTag) -> WbGpsCoordinateSystem;
}
extern "C" {
    #[link_name = "\u{1}_wb_gyro_enable"]
    pub fn wb_gyro_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_gyro_disable"]
    pub fn wb_gyro_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_gyro_get_sampling_period"]
    pub fn wb_gyro_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_gyro_get_values"]
    pub fn wb_gyro_get_values(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_inertial_unit_enable"]
    pub fn wb_inertial_unit_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_inertial_unit_disable"]
    pub fn wb_inertial_unit_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_inertial_unit_get_sampling_period"]
    pub fn wb_inertial_unit_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_inertial_unit_get_roll_pitch_yaw"]
    pub fn wb_inertial_unit_get_roll_pitch_yaw(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_enable"]
    pub fn wb_joystick_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_disable"]
    pub fn wb_joystick_disable();
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_get_sampling_period"]
    pub fn wb_joystick_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_is_connected"]
    pub fn wb_joystick_is_connected() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_get_model"]
    pub fn wb_joystick_get_model() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_get_number_of_axes"]
    pub fn wb_joystick_get_number_of_axes() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_get_axis_value"]
    pub fn wb_joystick_get_axis_value(axis: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_get_number_of_povs"]
    pub fn wb_joystick_get_number_of_povs() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_get_pov_value"]
    pub fn wb_joystick_get_pov_value(pov: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_get_pressed_button"]
    pub fn wb_joystick_get_pressed_button() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_set_constant_force"]
    pub fn wb_joystick_set_constant_force(level: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_set_constant_force_duration"]
    pub fn wb_joystick_set_constant_force_duration(duration: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_set_auto_centering_gain"]
    pub fn wb_joystick_set_auto_centering_gain(gain: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_set_resistance_gain"]
    pub fn wb_joystick_set_resistance_gain(gain: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_joystick_set_force_axis"]
    pub fn wb_joystick_set_force_axis(axis: ::std::os::raw::c_int);
}
pub const WB_KEYBOARD_END: _bindgen_ty_1 = 312;
pub const WB_KEYBOARD_HOME: _bindgen_ty_1 = 313;
pub const WB_KEYBOARD_LEFT: _bindgen_ty_1 = 314;
pub const WB_KEYBOARD_UP: _bindgen_ty_1 = 315;
pub const WB_KEYBOARD_RIGHT: _bindgen_ty_1 = 316;
pub const WB_KEYBOARD_DOWN: _bindgen_ty_1 = 317;
pub const WB_KEYBOARD_PAGEUP: _bindgen_ty_1 = 366;
pub const WB_KEYBOARD_PAGEDOWN: _bindgen_ty_1 = 367;
pub const WB_KEYBOARD_NUMPAD_HOME: _bindgen_ty_1 = 375;
pub const WB_KEYBOARD_WB_KEYBOARD_PAGEDOWN: _bindgen_ty_1 = 376;
pub const WB_KEYBOARD_NUMPAD_UP: _bindgen_ty_1 = 377;
pub const WB_KEYBOARD_NUMPAD_RIGHT: _bindgen_ty_1 = 378;
pub const WB_KEYBOARD_NUMPAD_DOWN: _bindgen_ty_1 = 379;
pub const WB_KEYBOARD_NUMPAD_END: _bindgen_ty_1 = 382;
pub const WB_KEYBOARD_KEY: _bindgen_ty_1 = 65535;
pub const WB_KEYBOARD_SHIFT: _bindgen_ty_1 = 65536;
pub const WB_KEYBOARD_CONTROL: _bindgen_ty_1 = 131072;
pub const WB_KEYBOARD_ALT: _bindgen_ty_1 = 262144;
pub type _bindgen_ty_1 = u32;
extern "C" {
    #[link_name = "\u{1}_wb_keyboard_enable"]
    pub fn wb_keyboard_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_keyboard_disable"]
    pub fn wb_keyboard_disable();
}
extern "C" {
    #[link_name = "\u{1}_wb_keyboard_get_sampling_period"]
    pub fn wb_keyboard_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_keyboard_get_key"]
    pub fn wb_keyboard_get_key() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_led_set"]
    pub fn wb_led_set(tag: WbDeviceTag, value: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_led_get"]
    pub fn wb_led_get(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbLidarPoint {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub layer_id: ::std::os::raw::c_int,
    pub time: f32,
}
#[test]
fn bindgen_test_layout_WbLidarPoint() {
    assert_eq!(
        ::std::mem::size_of::<WbLidarPoint>(),
        20usize,
        concat!("Size of: ", stringify!(WbLidarPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<WbLidarPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(WbLidarPoint))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbLidarPoint>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbLidarPoint>())).y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbLidarPoint>())).z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbLidarPoint>())).layer_id as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(layer_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbLidarPoint>())).time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbLidarPoint),
            "::",
            stringify!(time)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_enable"]
    pub fn wb_lidar_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_enable_point_cloud"]
    pub fn wb_lidar_enable_point_cloud(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_disable"]
    pub fn wb_lidar_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_disable_point_cloud"]
    pub fn wb_lidar_disable_point_cloud(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_sampling_period"]
    pub fn wb_lidar_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_is_point_cloud_enabled"]
    pub fn wb_lidar_is_point_cloud_enabled(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_range_image"]
    pub fn wb_lidar_get_range_image(tag: WbDeviceTag) -> *const f32;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_layer_range_image"]
    pub fn wb_lidar_get_layer_range_image(
        tag: WbDeviceTag,
        layer: ::std::os::raw::c_int,
    ) -> *const f32;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_point_cloud"]
    pub fn wb_lidar_get_point_cloud(tag: WbDeviceTag) -> *const WbLidarPoint;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_layer_point_cloud"]
    pub fn wb_lidar_get_layer_point_cloud(
        tag: WbDeviceTag,
        layer: ::std::os::raw::c_int,
    ) -> *const WbLidarPoint;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_number_of_points"]
    pub fn wb_lidar_get_number_of_points(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_horizontal_resolution"]
    pub fn wb_lidar_get_horizontal_resolution(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_number_of_layers"]
    pub fn wb_lidar_get_number_of_layers(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_min_frequency"]
    pub fn wb_lidar_get_min_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_max_frequency"]
    pub fn wb_lidar_get_max_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_frequency"]
    pub fn wb_lidar_get_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_set_frequency"]
    pub fn wb_lidar_set_frequency(tag: WbDeviceTag, frequency: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_fov"]
    pub fn wb_lidar_get_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_vertical_fov"]
    pub fn wb_lidar_get_vertical_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_min_range"]
    pub fn wb_lidar_get_min_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_lidar_get_max_range"]
    pub fn wb_lidar_get_max_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_light_sensor_enable"]
    pub fn wb_light_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_light_sensor_disable"]
    pub fn wb_light_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_light_sensor_get_sampling_period"]
    pub fn wb_light_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_light_sensor_get_value"]
    pub fn wb_light_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_microphone_enable"]
    pub fn wb_microphone_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_microphone_disable"]
    pub fn wb_microphone_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_microphone_get_sampling_period"]
    pub fn wb_microphone_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_microphone_get_sample_data"]
    pub fn wb_microphone_get_sample_data(tag: WbDeviceTag) -> *const ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_wb_microphone_get_sample_size"]
    pub fn wb_microphone_get_sample_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_set_position"]
    pub fn wb_motor_set_position(tag: WbDeviceTag, position: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_set_acceleration"]
    pub fn wb_motor_set_acceleration(tag: WbDeviceTag, acceleration: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_set_velocity"]
    pub fn wb_motor_set_velocity(tag: WbDeviceTag, velocity: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_set_force"]
    pub fn wb_motor_set_force(tag: WbDeviceTag, force: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_set_torque"]
    pub fn wb_motor_set_torque(tag: WbDeviceTag, torque: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_set_available_force"]
    pub fn wb_motor_set_available_force(tag: WbDeviceTag, force: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_set_available_torque"]
    pub fn wb_motor_set_available_torque(tag: WbDeviceTag, torque: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_set_control_pid"]
    pub fn wb_motor_set_control_pid(tag: WbDeviceTag, p: f64, i: f64, d: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_enable_force_feedback"]
    pub fn wb_motor_enable_force_feedback(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_disable_force_feedback"]
    pub fn wb_motor_disable_force_feedback(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_force_feedback_sampling_period"]
    pub fn wb_motor_get_force_feedback_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_force_feedback"]
    pub fn wb_motor_get_force_feedback(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_enable_torque_feedback"]
    pub fn wb_motor_enable_torque_feedback(
        tag: WbDeviceTag,
        sampling_period: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_disable_torque_feedback"]
    pub fn wb_motor_disable_torque_feedback(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_torque_feedback_sampling_period"]
    pub fn wb_motor_get_torque_feedback_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_torque_feedback"]
    pub fn wb_motor_get_torque_feedback(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_type"]
    pub fn wb_motor_get_type(tag: WbDeviceTag) -> WbJointType;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_target_position"]
    pub fn wb_motor_get_target_position(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_min_position"]
    pub fn wb_motor_get_min_position(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_max_position"]
    pub fn wb_motor_get_max_position(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_velocity"]
    pub fn wb_motor_get_velocity(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_max_velocity"]
    pub fn wb_motor_get_max_velocity(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_acceleration"]
    pub fn wb_motor_get_acceleration(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_available_force"]
    pub fn wb_motor_get_available_force(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_max_force"]
    pub fn wb_motor_get_max_force(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_available_torque"]
    pub fn wb_motor_get_available_torque(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_max_torque"]
    pub fn wb_motor_get_max_torque(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_brake"]
    pub fn wb_motor_get_brake(tag: WbDeviceTag) -> WbDeviceTag;
}
extern "C" {
    #[link_name = "\u{1}_wb_motor_get_position_sensor"]
    pub fn wb_motor_get_position_sensor(tag: WbDeviceTag) -> WbDeviceTag;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbMouseState {
    pub left: ::std::os::raw::c_char,
    pub middle: ::std::os::raw::c_char,
    pub right: ::std::os::raw::c_char,
    pub u: f64,
    pub v: f64,
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_WbMouseState() {
    assert_eq!(
        ::std::mem::size_of::<WbMouseState>(),
        48usize,
        concat!("Size of: ", stringify!(WbMouseState))
    );
    assert_eq!(
        ::std::mem::align_of::<WbMouseState>(),
        8usize,
        concat!("Alignment of ", stringify!(WbMouseState))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).middle as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(middle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).right as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).v as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).x as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).y as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbMouseState>())).z as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WbMouseState),
            "::",
            stringify!(z)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_mouse_enable"]
    pub fn wb_mouse_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_mouse_disable"]
    pub fn wb_mouse_disable();
}
extern "C" {
    #[link_name = "\u{1}_wb_mouse_get_sampling_period"]
    pub fn wb_mouse_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_mouse_enable_3d_position"]
    pub fn wb_mouse_enable_3d_position();
}
extern "C" {
    #[link_name = "\u{1}_wb_mouse_disable_3d_position"]
    pub fn wb_mouse_disable_3d_position();
}
extern "C" {
    #[link_name = "\u{1}_wb_mouse_is_3d_position_enabled"]
    pub fn wb_mouse_is_3d_position_enabled() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_mouse_get_state"]
    pub fn wb_mouse_get_state() -> WbMouseState;
}
extern "C" {
    #[link_name = "\u{1}_wb_pen_write"]
    pub fn wb_pen_write(tag: WbDeviceTag, write: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wb_pen_set_ink_color"]
    pub fn wb_pen_set_ink_color(tag: WbDeviceTag, color: ::std::os::raw::c_int, density: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_position_sensor_enable"]
    pub fn wb_position_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_position_sensor_disable"]
    pub fn wb_position_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_position_sensor_get_sampling_period"]
    pub fn wb_position_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_position_sensor_get_value"]
    pub fn wb_position_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_position_sensor_get_type"]
    pub fn wb_position_sensor_get_type(tag: WbDeviceTag) -> WbJointType;
}
extern "C" {
    #[link_name = "\u{1}_wb_position_sensor_get_motor"]
    pub fn wb_position_sensor_get_motor(tag: WbDeviceTag) -> WbDeviceTag;
}
extern "C" {
    #[link_name = "\u{1}_wb_position_sensor_get_brake"]
    pub fn wb_position_sensor_get_brake(tag: WbDeviceTag) -> WbDeviceTag;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbRadarTarget {
    pub distance: f64,
    pub received_power: f64,
    pub speed: f64,
    pub azimuth: f64,
}
#[test]
fn bindgen_test_layout_WbRadarTarget() {
    assert_eq!(
        ::std::mem::size_of::<WbRadarTarget>(),
        32usize,
        concat!("Size of: ", stringify!(WbRadarTarget))
    );
    assert_eq!(
        ::std::mem::align_of::<WbRadarTarget>(),
        8usize,
        concat!("Alignment of ", stringify!(WbRadarTarget))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbRadarTarget>())).distance as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbRadarTarget>())).received_power as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(received_power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbRadarTarget>())).speed as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbRadarTarget>())).azimuth as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WbRadarTarget),
            "::",
            stringify!(azimuth)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_radar_enable"]
    pub fn wb_radar_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_radar_disable"]
    pub fn wb_radar_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_radar_get_sampling_period"]
    pub fn wb_radar_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_radar_get_number_of_targets"]
    pub fn wb_radar_get_number_of_targets(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_radar_get_targets"]
    pub fn wb_radar_get_targets(tag: WbDeviceTag) -> *const WbRadarTarget;
}
extern "C" {
    #[link_name = "\u{1}_wb_radar_get_min_range"]
    pub fn wb_radar_get_min_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_radar_get_max_range"]
    pub fn wb_radar_get_max_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_radar_get_horizontal_fov"]
    pub fn wb_radar_get_horizontal_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_radar_get_vertical_fov"]
    pub fn wb_radar_get_vertical_fov(tag: WbDeviceTag) -> f64;
}
pub type WbRadioMessage = *mut ::std::os::raw::c_void;
pub type WbRadioEvent = *mut ::std::os::raw::c_void;
extern "C" {
    #[link_name = "\u{1}_wb_radio_message_new"]
    pub fn wb_radio_message_new(
        length: ::std::os::raw::c_int,
        body: *const ::std::os::raw::c_char,
        destination: *const ::std::os::raw::c_char,
    ) -> WbRadioMessage;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_message_delete"]
    pub fn wb_radio_message_delete(arg1: WbRadioMessage);
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_message_get_destination"]
    pub fn wb_radio_message_get_destination(arg1: WbRadioMessage) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_message_get_length"]
    pub fn wb_radio_message_get_length(arg1: WbRadioMessage) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_message_get_body"]
    pub fn wb_radio_message_get_body(arg1: WbRadioMessage) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_enable"]
    pub fn wb_radio_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_disable"]
    pub fn wb_radio_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_set_address"]
    pub fn wb_radio_set_address(tag: WbDeviceTag, address: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_get_address"]
    pub fn wb_radio_get_address(tag: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_set_frequency"]
    pub fn wb_radio_set_frequency(tag: WbDeviceTag, hz: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_get_frequency"]
    pub fn wb_radio_get_frequency(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_set_channel"]
    pub fn wb_radio_set_channel(tag: WbDeviceTag, channel: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_get_channel"]
    pub fn wb_radio_get_channel(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_set_bitrate"]
    pub fn wb_radio_set_bitrate(tag: WbDeviceTag, bits_per_second: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_get_bitrate"]
    pub fn wb_radio_get_bitrate(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_set_rx_sensitivity"]
    pub fn wb_radio_set_rx_sensitivity(tag: WbDeviceTag, dBm: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_get_rx_sensitivity"]
    pub fn wb_radio_get_rx_sensitivity(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_set_tx_power"]
    pub fn wb_radio_set_tx_power(tag: WbDeviceTag, dBm: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_get_tx_power"]
    pub fn wb_radio_get_tx_power(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_set_callback"]
    pub fn wb_radio_set_callback(
        tag: WbDeviceTag,
        arg1: ::std::option::Option<unsafe extern "C" fn(tag: WbRadioEvent)>,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_event_get_radio"]
    pub fn wb_radio_event_get_radio(arg1: WbRadioEvent) -> WbDeviceTag;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_event_get_data"]
    pub fn wb_radio_event_get_data(arg1: WbRadioEvent) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_event_get_data_size"]
    pub fn wb_radio_event_get_data_size(arg1: WbRadioEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_event_get_emitter"]
    pub fn wb_radio_event_get_emitter(arg1: WbRadioEvent) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_event_get_rssi"]
    pub fn wb_radio_event_get_rssi(arg1: WbRadioEvent) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_radio_send"]
    pub fn wb_radio_send(tag: WbDeviceTag, arg1: WbRadioMessage, delay: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_range_finder_enable"]
    pub fn wb_range_finder_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_range_finder_disable"]
    pub fn wb_range_finder_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_range_finder_get_sampling_period"]
    pub fn wb_range_finder_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_range_finder_get_range_image"]
    pub fn wb_range_finder_get_range_image(tag: WbDeviceTag) -> *const f32;
}
extern "C" {
    #[link_name = "\u{1}_wb_range_finder_get_width"]
    pub fn wb_range_finder_get_width(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_range_finder_get_height"]
    pub fn wb_range_finder_get_height(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_range_finder_get_fov"]
    pub fn wb_range_finder_get_fov(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_range_finder_get_min_range"]
    pub fn wb_range_finder_get_min_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_range_finder_get_max_range"]
    pub fn wb_range_finder_get_max_range(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_range_finder_save_image"]
    pub fn wb_range_finder_save_image(
        tag: WbDeviceTag,
        filename: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_receiver_enable"]
    pub fn wb_receiver_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_receiver_disable"]
    pub fn wb_receiver_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_receiver_get_sampling_period"]
    pub fn wb_receiver_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_receiver_set_channel"]
    pub fn wb_receiver_set_channel(tag: WbDeviceTag, channel: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_receiver_get_channel"]
    pub fn wb_receiver_get_channel(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_receiver_get_queue_length"]
    pub fn wb_receiver_get_queue_length(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_receiver_next_packet"]
    pub fn wb_receiver_next_packet(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_receiver_get_data_size"]
    pub fn wb_receiver_get_data_size(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_receiver_get_data"]
    pub fn wb_receiver_get_data(tag: WbDeviceTag) -> *const ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_wb_receiver_get_signal_strength"]
    pub fn wb_receiver_get_signal_strength(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_receiver_get_emitter_direction"]
    pub fn wb_receiver_get_emitter_direction(tag: WbDeviceTag) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_remote_control_custom_function"]
    pub fn wb_remote_control_custom_function(
        arg1: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_wbr_robot_battery_sensor_set_value"]
    pub fn wbr_robot_battery_sensor_set_value(value: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_differential_wheels_set_encoders"]
    pub fn wbr_differential_wheels_set_encoders(left: f64, right: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_accelerometer_set_values"]
    pub fn wbr_accelerometer_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_camera_recognition_set_object"]
    pub fn wbr_camera_recognition_set_object(
        tag: WbDeviceTag,
        objects: *const WbCameraRecognitionObject,
        object_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wbr_compass_set_values"]
    pub fn wbr_compass_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_distance_sensor_set_value"]
    pub fn wbr_distance_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_gps_set_values"]
    pub fn wbr_gps_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_gps_set_speed"]
    pub fn wbr_gps_set_speed(tag: WbDeviceTag, speed: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_gyro_set_values"]
    pub fn wbr_gyro_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_inertial_unit_set_value"]
    pub fn wbr_inertial_unit_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_light_sensor_set_value"]
    pub fn wbr_light_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_microphone_set_buffer"]
    pub fn wbr_microphone_set_buffer(
        tag: WbDeviceTag,
        buffer: *const ::std::os::raw::c_uchar,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wbr_motor_set_position_feedback"]
    pub fn wbr_motor_set_position_feedback(tag: WbDeviceTag, value: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_motor_set_force_feedback"]
    pub fn wbr_motor_set_force_feedback(tag: WbDeviceTag, value: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_motor_set_torque_feedback"]
    pub fn wbr_motor_set_torque_feedback(tag: WbDeviceTag, value: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_position_sensor_set_value"]
    pub fn wbr_position_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_radar_set_targets"]
    pub fn wbr_radar_set_targets(
        tag: WbDeviceTag,
        targets: *const WbRadarTarget,
        target_number: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wbr_touch_sensor_set_value"]
    pub fn wbr_touch_sensor_set_value(tag: WbDeviceTag, value: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_touch_sensor_set_values"]
    pub fn wbr_touch_sensor_set_values(tag: WbDeviceTag, values: *const f64);
}
extern "C" {
    #[link_name = "\u{1}_wbr_display_save_image"]
    pub fn wbr_display_save_image(
        tag: WbDeviceTag,
        id: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        image: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    #[link_name = "\u{1}_wbr_camera_set_image"]
    pub fn wbr_camera_set_image(tag: WbDeviceTag, image: *const ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "\u{1}_wbr_camera_get_image_buffer"]
    pub fn wbr_camera_get_image_buffer(tag: WbDeviceTag) -> *mut ::std::os::raw::c_uchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbrInterface {
    pub mandatory: WbrInterface__bindgen_ty_1,
    pub wbr_custom_function: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub wbr_robot_battery_set_sampling_period:
        ::std::option::Option<unsafe extern "C" fn(sampling_period: ::std::os::raw::c_int)>,
    pub wbr_differential_wheels_encoders_set_sampling_period:
        ::std::option::Option<unsafe extern "C" fn(sampling_period: ::std::os::raw::c_int)>,
    pub wbr_differential_wheels_set_speed:
        ::std::option::Option<unsafe extern "C" fn(left: f64, right: f64)>,
    pub wbr_differential_wheels_set_encoders:
        ::std::option::Option<unsafe extern "C" fn(left: f64, right: f64)>,
    pub wbr_set_sampling_period: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int),
    >,
    pub wbr_camera_set_fov: ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, fov: f64)>,
    pub wbr_camera_set_focal_distance:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, focal_distance: f64)>,
    pub wbr_led_set:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, state: ::std::os::raw::c_int)>,
    pub wbr_pen_set_ink_color: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, color: ::std::os::raw::c_int, density: f64),
    >,
    pub wbr_pen_write: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, write: ::std::os::raw::c_char),
    >,
    pub wbr_speaker_emit_sample: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            data: *const ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_motor_set_force_sampling_period: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int),
    >,
    pub wbr_motor_set_torque_sampling_period: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int),
    >,
    pub wbr_motor_set_position:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, position: f64)>,
    pub wbr_motor_set_acceleration:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, acceleration: f64)>,
    pub wbr_motor_set_velocity:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, velocity: f64)>,
    pub wbr_motor_set_force:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, force: f64)>,
    pub wbr_motor_set_torque:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, torque: f64)>,
    pub wbr_motor_set_available_force:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, available_force: f64)>,
    pub wbr_motor_set_available_torque:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, available_torque: f64)>,
    pub wbr_motor_set_control_pid:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, p: f64, i: f64, d: f64)>,
    pub wbr_display_set_color:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, color: ::std::os::raw::c_int)>,
    pub wbr_display_set_alpha:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, alpha: f64)>,
    pub wbr_display_set_opacity:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, opacity: f64)>,
    pub wbr_display_draw_pixel: ::std::option::Option<
        unsafe extern "C" fn(tag: WbDeviceTag, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int),
    >,
    pub wbr_display_draw_line: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x1: ::std::os::raw::c_int,
            y1: ::std::os::raw::c_int,
            x2: ::std::os::raw::c_int,
            y2: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_rectangle: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_oval: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            cx: ::std::os::raw::c_int,
            cy: ::std::os::raw::c_int,
            a: ::std::os::raw::c_int,
            b: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_polygon: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: *const ::std::os::raw::c_int,
            y: *const ::std::os::raw::c_int,
            size: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_draw_text: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            txt: *const ::std::os::raw::c_char,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_fill_rectangle: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_fill_oval: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            cx: ::std::os::raw::c_int,
            cy: ::std::os::raw::c_int,
            a: ::std::os::raw::c_int,
            b: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_fill_polygon: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            x: *const ::std::os::raw::c_int,
            y: *const ::std::os::raw::c_int,
            size: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_new: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            id: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            data: *const ::std::os::raw::c_void,
            format: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_copy: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            id: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_delete:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, id: ::std::os::raw::c_int)>,
    pub wbr_display_image_paste: ::std::option::Option<
        unsafe extern "C" fn(
            tag: WbDeviceTag,
            id: ::std::os::raw::c_int,
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
        ),
    >,
    pub wbr_display_image_save:
        ::std::option::Option<unsafe extern "C" fn(tag: WbDeviceTag, id: ::std::os::raw::c_int)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WbrInterface__bindgen_ty_1 {
    pub wbr_start: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_char,
    >,
    pub wbr_stop: ::std::option::Option<unsafe extern "C" fn()>,
    pub wbr_has_failed: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_char>,
    pub wbr_stop_actuators: ::std::option::Option<unsafe extern "C" fn()>,
    pub wbr_robot_step: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_WbrInterface__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<WbrInterface__bindgen_ty_1>(),
        40usize,
        concat!("Size of: ", stringify!(WbrInterface__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<WbrInterface__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(WbrInterface__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface__bindgen_ty_1>())).wbr_start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface__bindgen_ty_1>())).wbr_stop as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_stop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface__bindgen_ty_1>())).wbr_has_failed as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_has_failed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface__bindgen_ty_1>())).wbr_stop_actuators as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_stop_actuators)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface__bindgen_ty_1>())).wbr_robot_step as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface__bindgen_ty_1),
            "::",
            stringify!(wbr_robot_step)
        )
    );
}
#[test]
fn bindgen_test_layout_WbrInterface() {
    assert_eq!(
        ::std::mem::size_of::<WbrInterface>(),
        352usize,
        concat!("Size of: ", stringify!(WbrInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<WbrInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(WbrInterface))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbrInterface>())).mandatory as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(mandatory)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_custom_function as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_custom_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_robot_battery_set_sampling_period
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_robot_battery_set_sampling_period)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>()))
                .wbr_differential_wheels_encoders_set_sampling_period as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_differential_wheels_encoders_set_sampling_period)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_differential_wheels_set_speed as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_differential_wheels_set_speed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_differential_wheels_set_encoders
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_differential_wheels_set_encoders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_set_sampling_period as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_set_sampling_period)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbrInterface>())).wbr_camera_set_fov as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_camera_set_fov)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_camera_set_focal_distance as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_camera_set_focal_distance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbrInterface>())).wbr_led_set as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_led_set)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_pen_set_ink_color as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_pen_set_ink_color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WbrInterface>())).wbr_pen_write as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_pen_write)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_speaker_emit_sample as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_speaker_emit_sample)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_force_sampling_period as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_force_sampling_period)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_torque_sampling_period
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_torque_sampling_period)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_position as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_acceleration as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_acceleration)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_velocity as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_velocity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_force as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_force)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_torque as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_torque)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_available_force as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_available_force)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_available_torque as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_available_torque)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_motor_set_control_pid as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_motor_set_control_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_set_color as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_set_color)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_set_alpha as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_set_alpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_set_opacity as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_set_opacity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_pixel as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_pixel)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_line as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_line)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_rectangle as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_rectangle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_oval as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_oval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_polygon as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_polygon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_draw_text as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_draw_text)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_fill_rectangle as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_fill_rectangle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_fill_oval as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_fill_oval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_fill_polygon as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_fill_polygon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_image_new as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_new)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_image_copy as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_image_delete as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_delete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_image_paste as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_paste)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WbrInterface>())).wbr_display_image_save as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(WbrInterface),
            "::",
            stringify!(wbr_display_image_save)
        )
    );
}
pub type WbMutexRef = *mut ::std::os::raw::c_void;
pub const WbRobotMode_WB_MODE_SIMULATION: WbRobotMode = 0;
pub const WbRobotMode_WB_MODE_CROSS_COMPILATION: WbRobotMode = 1;
pub const WbRobotMode_WB_MODE_REMOTE_CONTROL: WbRobotMode = 2;
pub type WbRobotMode = u32;
pub const WbUserInputEvent_WB_EVENT_QUIT: WbUserInputEvent = -1;
pub const WbUserInputEvent_WB_EVENT_NO_EVENT: WbUserInputEvent = 0;
pub const WbUserInputEvent_WB_EVENT_MOUSE_CLICK: WbUserInputEvent = 1;
pub const WbUserInputEvent_WB_EVENT_MOUSE_MOVE: WbUserInputEvent = 2;
pub const WbUserInputEvent_WB_EVENT_KEYBOARD: WbUserInputEvent = 4;
pub const WbUserInputEvent_WB_EVENT_JOYSTICK_BUTTON: WbUserInputEvent = 8;
pub const WbUserInputEvent_WB_EVENT_JOYSTICK_AXIS: WbUserInputEvent = 16;
pub const WbUserInputEvent_WB_EVENT_JOYSTICK_POV: WbUserInputEvent = 32;
pub type WbUserInputEvent = i32;
extern "C" {
    #[link_name = "\u{1}_wb_robot_init"]
    pub fn wb_robot_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_step"]
    pub fn wb_robot_step(duration: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_wait_for_user_input_event"]
    pub fn wb_robot_wait_for_user_input_event(
        event_type: WbUserInputEvent,
        timeout: ::std::os::raw::c_int,
    ) -> WbUserInputEvent;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_cleanup"]
    pub fn wb_robot_cleanup();
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_time"]
    pub fn wb_robot_get_time() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_name"]
    pub fn wb_robot_get_name() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_model"]
    pub fn wb_robot_get_model() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_custom_data"]
    pub fn wb_robot_get_custom_data() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_set_custom_data"]
    pub fn wb_robot_set_custom_data(data: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_mode"]
    pub fn wb_robot_get_mode() -> WbRobotMode;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_set_mode"]
    pub fn wb_robot_set_mode(mode: WbRobotMode, args: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_synchronization"]
    pub fn wb_robot_get_synchronization() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_supervisor"]
    pub fn wb_robot_get_supervisor() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_project_path"]
    pub fn wb_robot_get_project_path() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_world_path"]
    pub fn wb_robot_get_world_path() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_basic_time_step"]
    pub fn wb_robot_get_basic_time_step() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_device"]
    pub fn wb_robot_get_device(name: *const ::std::os::raw::c_char) -> WbDeviceTag;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_controller_name"]
    pub fn wb_robot_get_controller_name() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_controller_arguments"]
    pub fn wb_robot_get_controller_arguments() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_number_of_devices"]
    pub fn wb_robot_get_number_of_devices() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_device_by_index"]
    pub fn wb_robot_get_device_by_index(index: ::std::os::raw::c_int) -> WbDeviceTag;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_type"]
    pub fn wb_robot_get_type() -> WbNodeType;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_battery_sensor_enable"]
    pub fn wb_robot_battery_sensor_enable(sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_battery_sensor_disable"]
    pub fn wb_robot_battery_sensor_disable();
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_battery_sensor_get_sampling_period"]
    pub fn wb_robot_battery_sensor_get_sampling_period() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_battery_sensor_get_value"]
    pub fn wb_robot_battery_sensor_get_value() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_task_new"]
    pub fn wb_robot_task_new(
        task: ::std::option::Option<unsafe extern "C" fn(task: *mut ::std::os::raw::c_void)>,
        param: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_mutex_new"]
    pub fn wb_robot_mutex_new() -> WbMutexRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_mutex_lock"]
    pub fn wb_robot_mutex_lock(arg1: WbMutexRef);
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_mutex_unlock"]
    pub fn wb_robot_mutex_unlock(arg1: WbMutexRef);
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_mutex_delete"]
    pub fn wb_robot_mutex_delete(arg1: WbMutexRef);
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_pin_to_static_environment"]
    pub fn wb_robot_pin_to_static_environment(pin: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_get_data"]
    pub fn wb_robot_get_data() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_set_data"]
    pub fn wb_robot_set_data(data: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_window_custom_function"]
    pub fn wb_robot_window_custom_function(
        arg1: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __uint32_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
extern "C" {
    #[link_name = "\u{1}_memchr"]
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memcmp"]
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_memcpy"]
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memmove"]
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memset"]
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_strcat"]
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strchr"]
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strcmp"]
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcoll"]
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcpy"]
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strcspn"]
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strerror"]
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strlen"]
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strncat"]
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strncmp"]
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strncpy"]
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strpbrk"]
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strrchr"]
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strspn"]
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strstr"]
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strtok"]
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strxfrm"]
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strtok_r"]
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strdup"]
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_memccpy"]
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_stpcpy"]
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_stpncpy"]
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strndup"]
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strnlen"]
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_strsignal"]
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "\u{1}_memset_s"]
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    #[link_name = "\u{1}_memmem"]
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern4"]
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern8"]
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern16"]
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_strcasestr"]
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strnstr"]
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strlcat"]
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strlcpy"]
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strmode"]
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_strsep"]
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_swab"]
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    #[link_name = "\u{1}_timingsafe_bcmp"]
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bcmp"]
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bcopy"]
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_bzero"]
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    #[link_name = "\u{1}_index"]
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_rindex"]
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ffs"]
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcasecmp"]
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strncasecmp"]
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ffsl"]
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ffsll"]
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fls"]
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flsl"]
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flsll"]
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_wwi_send"]
    pub fn wb_robot_wwi_send(data: *const ::std::os::raw::c_char, size: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_robot_wwi_receive"]
    pub fn wb_robot_wwi_receive(size: *mut ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_skin_set_bone_orientation"]
    pub fn wb_skin_set_bone_orientation(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        orientation: *const f64,
        absolute: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_skin_set_bone_position"]
    pub fn wb_skin_set_bone_position(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        position: *const f64,
        absolute: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_skin_get_bone_count"]
    pub fn wb_skin_get_bone_count(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_skin_get_bone_name"]
    pub fn wb_skin_get_bone_name(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_skin_get_bone_orientation"]
    pub fn wb_skin_get_bone_orientation(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        absolute: ::std::os::raw::c_char,
    ) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_skin_get_bone_position"]
    pub fn wb_skin_get_bone_position(
        tag: WbDeviceTag,
        index: ::std::os::raw::c_int,
        absolute: ::std::os::raw::c_char,
    ) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_speaker_play_sound"]
    pub fn wb_speaker_play_sound(
        left: WbDeviceTag,
        right: WbDeviceTag,
        sound: *const ::std::os::raw::c_char,
        volume: f64,
        pitch: f64,
        balance: f64,
        loop_: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_speaker_stop"]
    pub fn wb_speaker_stop(tag: WbDeviceTag, sound: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wb_speaker_is_sound_playing"]
    pub fn wb_speaker_is_sound_playing(
        tag: WbDeviceTag,
        sound: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_speaker_set_engine"]
    pub fn wb_speaker_set_engine(
        tag: WbDeviceTag,
        engine: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_speaker_set_language"]
    pub fn wb_speaker_set_language(
        tag: WbDeviceTag,
        language: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_speaker_get_engine"]
    pub fn wb_speaker_get_engine(tag: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_speaker_get_language"]
    pub fn wb_speaker_get_language(tag: WbDeviceTag) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_speaker_speak"]
    pub fn wb_speaker_speak(tag: WbDeviceTag, text: *const ::std::os::raw::c_char, volume: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_speaker_is_speaking"]
    pub fn wb_speaker_is_speaking(tag: WbDeviceTag) -> ::std::os::raw::c_char;
}
pub const WbFieldType_WB_NO_FIELD: WbFieldType = 0;
pub const WbFieldType_WB_SF_BOOL: WbFieldType = 1;
pub const WbFieldType_WB_SF_INT32: WbFieldType = 2;
pub const WbFieldType_WB_SF_FLOAT: WbFieldType = 3;
pub const WbFieldType_WB_SF_VEC2F: WbFieldType = 4;
pub const WbFieldType_WB_SF_VEC3F: WbFieldType = 5;
pub const WbFieldType_WB_SF_ROTATION: WbFieldType = 6;
pub const WbFieldType_WB_SF_COLOR: WbFieldType = 7;
pub const WbFieldType_WB_SF_STRING: WbFieldType = 8;
pub const WbFieldType_WB_SF_NODE: WbFieldType = 9;
pub const WbFieldType_WB_MF: WbFieldType = 16;
pub const WbFieldType_WB_MF_BOOL: WbFieldType = 17;
pub const WbFieldType_WB_MF_INT32: WbFieldType = 18;
pub const WbFieldType_WB_MF_FLOAT: WbFieldType = 19;
pub const WbFieldType_WB_MF_VEC2F: WbFieldType = 20;
pub const WbFieldType_WB_MF_VEC3F: WbFieldType = 21;
pub const WbFieldType_WB_MF_ROTATION: WbFieldType = 22;
pub const WbFieldType_WB_MF_COLOR: WbFieldType = 23;
pub const WbFieldType_WB_MF_STRING: WbFieldType = 24;
pub const WbFieldType_WB_MF_NODE: WbFieldType = 25;
pub type WbFieldType = u32;
pub const WbSimulationMode_WB_SUPERVISOR_SIMULATION_MODE_PAUSE: WbSimulationMode = 0;
pub const WbSimulationMode_WB_SUPERVISOR_SIMULATION_MODE_REAL_TIME: WbSimulationMode = 1;
pub const WbSimulationMode_WB_SUPERVISOR_SIMULATION_MODE_RUN: WbSimulationMode = 2;
pub const WbSimulationMode_WB_SUPERVISOR_SIMULATION_MODE_FAST: WbSimulationMode = 3;
pub type WbSimulationMode = u32;
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_world_load"]
    pub fn wb_supervisor_world_load(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_world_save"]
    pub fn wb_supervisor_world_save(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_world_reload"]
    pub fn wb_supervisor_world_reload();
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_simulation_quit"]
    pub fn wb_supervisor_simulation_quit(status: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_simulation_reset"]
    pub fn wb_supervisor_simulation_reset();
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_simulation_reset_physics"]
    pub fn wb_supervisor_simulation_reset_physics();
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_simulation_get_mode"]
    pub fn wb_supervisor_simulation_get_mode() -> WbSimulationMode;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_simulation_set_mode"]
    pub fn wb_supervisor_simulation_set_mode(mode: WbSimulationMode);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_set_label"]
    pub fn wb_supervisor_set_label(
        id: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        x: f64,
        y: f64,
        size: f64,
        color: ::std::os::raw::c_int,
        transparency: f64,
        font: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_export_image"]
    pub fn wb_supervisor_export_image(
        filename: *const ::std::os::raw::c_char,
        quality: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_movie_start_recording"]
    pub fn wb_supervisor_movie_start_recording(
        filename: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        codec: ::std::os::raw::c_int,
        quality: ::std::os::raw::c_int,
        acceleration: ::std::os::raw::c_int,
        caption: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_movie_stop_recording"]
    pub fn wb_supervisor_movie_stop_recording();
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_movie_is_ready"]
    pub fn wb_supervisor_movie_is_ready() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_movie_failed"]
    pub fn wb_supervisor_movie_failed() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_animation_start_recording"]
    pub fn wb_supervisor_animation_start_recording(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_animation_stop_recording"]
    pub fn wb_supervisor_animation_stop_recording() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_root"]
    pub fn wb_supervisor_node_get_root() -> WbNodeRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_self"]
    pub fn wb_supervisor_node_get_self() -> WbNodeRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_id"]
    pub fn wb_supervisor_node_get_id(node: WbNodeRef) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_from_id"]
    pub fn wb_supervisor_node_get_from_id(id: ::std::os::raw::c_int) -> WbNodeRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_from_def"]
    pub fn wb_supervisor_node_get_from_def(def: *const ::std::os::raw::c_char) -> WbNodeRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_parent_node"]
    pub fn wb_supervisor_node_get_parent_node(node: WbNodeRef) -> WbNodeRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_selected"]
    pub fn wb_supervisor_node_get_selected() -> WbNodeRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_type"]
    pub fn wb_supervisor_node_get_type(node: WbNodeRef) -> WbNodeType;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_field"]
    pub fn wb_supervisor_node_get_field(
        node: WbNodeRef,
        field_name: *const ::std::os::raw::c_char,
    ) -> WbFieldRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_remove"]
    pub fn wb_supervisor_node_remove(node: WbNodeRef);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_def"]
    pub fn wb_supervisor_node_get_def(node: WbNodeRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_type_name"]
    pub fn wb_supervisor_node_get_type_name(node: WbNodeRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_base_type_name"]
    pub fn wb_supervisor_node_get_base_type_name(node: WbNodeRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_center_of_mass"]
    pub fn wb_supervisor_node_get_center_of_mass(node: WbNodeRef) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_contact_point"]
    pub fn wb_supervisor_node_get_contact_point(
        node: WbNodeRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_number_of_contact_points"]
    pub fn wb_supervisor_node_get_number_of_contact_points(
        node: WbNodeRef,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_orientation"]
    pub fn wb_supervisor_node_get_orientation(node: WbNodeRef) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_position"]
    pub fn wb_supervisor_node_get_position(node: WbNodeRef) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_static_balance"]
    pub fn wb_supervisor_node_get_static_balance(node: WbNodeRef) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_get_velocity"]
    pub fn wb_supervisor_node_get_velocity(node: WbNodeRef) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_set_velocity"]
    pub fn wb_supervisor_node_set_velocity(node: WbNodeRef, velocity: *const f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_reset_physics"]
    pub fn wb_supervisor_node_reset_physics(node: WbNodeRef);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_restart_controller"]
    pub fn wb_supervisor_node_restart_controller(node: WbNodeRef);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_move_viewpoint"]
    pub fn wb_supervisor_node_move_viewpoint(node: WbNodeRef);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_node_set_visibility"]
    pub fn wb_supervisor_node_set_visibility(
        node: WbNodeRef,
        from: WbNodeRef,
        visible: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_type"]
    pub fn wb_supervisor_field_get_type(field: WbFieldRef) -> WbFieldType;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_type_name"]
    pub fn wb_supervisor_field_get_type_name(field: WbFieldRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_count"]
    pub fn wb_supervisor_field_get_count(field: WbFieldRef) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_sf_bool"]
    pub fn wb_supervisor_field_get_sf_bool(field: WbFieldRef) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_sf_int32"]
    pub fn wb_supervisor_field_get_sf_int32(field: WbFieldRef) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_sf_float"]
    pub fn wb_supervisor_field_get_sf_float(field: WbFieldRef) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_sf_vec2f"]
    pub fn wb_supervisor_field_get_sf_vec2f(field: WbFieldRef) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_sf_vec3f"]
    pub fn wb_supervisor_field_get_sf_vec3f(field: WbFieldRef) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_sf_rotation"]
    pub fn wb_supervisor_field_get_sf_rotation(field: WbFieldRef) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_sf_color"]
    pub fn wb_supervisor_field_get_sf_color(field: WbFieldRef) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_sf_string"]
    pub fn wb_supervisor_field_get_sf_string(field: WbFieldRef) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_sf_node"]
    pub fn wb_supervisor_field_get_sf_node(field: WbFieldRef) -> WbNodeRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_mf_bool"]
    pub fn wb_supervisor_field_get_mf_bool(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_mf_int32"]
    pub fn wb_supervisor_field_get_mf_int32(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_mf_float"]
    pub fn wb_supervisor_field_get_mf_float(field: WbFieldRef, index: ::std::os::raw::c_int)
        -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_mf_vec2f"]
    pub fn wb_supervisor_field_get_mf_vec2f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_mf_vec3f"]
    pub fn wb_supervisor_field_get_mf_vec3f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_mf_color"]
    pub fn wb_supervisor_field_get_mf_color(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_mf_rotation"]
    pub fn wb_supervisor_field_get_mf_rotation(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_mf_string"]
    pub fn wb_supervisor_field_get_mf_string(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_get_mf_node"]
    pub fn wb_supervisor_field_get_mf_node(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
    ) -> WbNodeRef;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_sf_bool"]
    pub fn wb_supervisor_field_set_sf_bool(field: WbFieldRef, value: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_sf_int32"]
    pub fn wb_supervisor_field_set_sf_int32(field: WbFieldRef, value: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_sf_float"]
    pub fn wb_supervisor_field_set_sf_float(field: WbFieldRef, value: f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_sf_vec2f"]
    pub fn wb_supervisor_field_set_sf_vec2f(field: WbFieldRef, values: *const f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_sf_vec3f"]
    pub fn wb_supervisor_field_set_sf_vec3f(field: WbFieldRef, values: *const f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_sf_rotation"]
    pub fn wb_supervisor_field_set_sf_rotation(field: WbFieldRef, values: *const f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_sf_color"]
    pub fn wb_supervisor_field_set_sf_color(field: WbFieldRef, values: *const f64);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_sf_string"]
    pub fn wb_supervisor_field_set_sf_string(
        field: WbFieldRef,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_mf_bool"]
    pub fn wb_supervisor_field_set_mf_bool(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_mf_int32"]
    pub fn wb_supervisor_field_set_mf_int32(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_mf_float"]
    pub fn wb_supervisor_field_set_mf_float(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_mf_vec2f"]
    pub fn wb_supervisor_field_set_mf_vec2f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_mf_vec3f"]
    pub fn wb_supervisor_field_set_mf_vec3f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_mf_rotation"]
    pub fn wb_supervisor_field_set_mf_rotation(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_mf_color"]
    pub fn wb_supervisor_field_set_mf_color(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_set_mf_string"]
    pub fn wb_supervisor_field_set_mf_string(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_insert_mf_bool"]
    pub fn wb_supervisor_field_insert_mf_bool(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_insert_mf_int32"]
    pub fn wb_supervisor_field_insert_mf_int32(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_insert_mf_float"]
    pub fn wb_supervisor_field_insert_mf_float(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_insert_mf_vec2f"]
    pub fn wb_supervisor_field_insert_mf_vec2f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_insert_mf_vec3f"]
    pub fn wb_supervisor_field_insert_mf_vec3f(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_insert_mf_rotation"]
    pub fn wb_supervisor_field_insert_mf_rotation(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_insert_mf_color"]
    pub fn wb_supervisor_field_insert_mf_color(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        values: *const f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_insert_mf_string"]
    pub fn wb_supervisor_field_insert_mf_string(
        field: WbFieldRef,
        index: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_remove_mf"]
    pub fn wb_supervisor_field_remove_mf(field: WbFieldRef, index: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_import_mf_node"]
    pub fn wb_supervisor_field_import_mf_node(
        field: WbFieldRef,
        position: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_import_mf_node_from_string"]
    pub fn wb_supervisor_field_import_mf_node_from_string(
        field: WbFieldRef,
        position: ::std::os::raw::c_int,
        node_string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_virtual_reality_headset_is_used"]
    pub fn wb_supervisor_virtual_reality_headset_is_used() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_virtual_reality_headset_get_position"]
    pub fn wb_supervisor_virtual_reality_headset_get_position() -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_virtual_reality_headset_get_orientation"]
    pub fn wb_supervisor_virtual_reality_headset_get_orientation() -> *const f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_simulation_revert"]
    pub fn wb_supervisor_simulation_revert();
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_load_world"]
    pub fn wb_supervisor_load_world(filename: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_save_world"]
    pub fn wb_supervisor_save_world(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_field_remove_mf_node"]
    pub fn wb_supervisor_field_remove_mf_node(field: WbFieldRef, position: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_simulation_physics_reset"]
    pub fn wb_supervisor_simulation_physics_reset();
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_movie_get_status"]
    pub fn wb_supervisor_movie_get_status() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_start_movie"]
    pub fn wb_supervisor_start_movie(
        file: *const ::std::os::raw::c_char,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        codec: ::std::os::raw::c_int,
        quality: ::std::os::raw::c_int,
        acceleration: ::std::os::raw::c_int,
        caption: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_stop_movie"]
    pub fn wb_supervisor_stop_movie();
}
extern "C" {
    #[link_name = "\u{1}_wb_supervisor_get_movie_status"]
    pub fn wb_supervisor_get_movie_status() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_touch_sensor_enable"]
    pub fn wb_touch_sensor_enable(tag: WbDeviceTag, sampling_period: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wb_touch_sensor_disable"]
    pub fn wb_touch_sensor_disable(tag: WbDeviceTag);
}
extern "C" {
    #[link_name = "\u{1}_wb_touch_sensor_get_sampling_period"]
    pub fn wb_touch_sensor_get_sampling_period(tag: WbDeviceTag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wb_touch_sensor_get_value"]
    pub fn wb_touch_sensor_get_value(tag: WbDeviceTag) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wb_touch_sensor_get_values"]
    pub fn wb_touch_sensor_get_values(tag: WbDeviceTag) -> *const f64;
}
pub const WbTouchSensorType_WB_TOUCH_SENSOR_BUMPER: WbTouchSensorType = 0;
pub const WbTouchSensorType_WB_TOUCH_SENSOR_FORCE: WbTouchSensorType = 1;
pub const WbTouchSensorType_WB_TOUCH_SENSOR_FORCE3D: WbTouchSensorType = 2;
pub type WbTouchSensorType = u32;
extern "C" {
    #[link_name = "\u{1}_wb_touch_sensor_get_type"]
    pub fn wb_touch_sensor_get_type(tag: WbDeviceTag) -> WbTouchSensorType;
}
extern "C" {
    #[link_name = "\u{1}_wbu_default_robot_window_configure"]
    pub fn wbu_default_robot_window_configure();
}
extern "C" {
    #[link_name = "\u{1}_wbu_default_robot_window_update"]
    pub fn wbu_default_robot_window_update();
}
extern "C" {
    #[link_name = "\u{1}_wbu_default_robot_window_set_images_max_size"]
    pub fn wbu_default_robot_window_set_images_max_size(
        max_width: ::std::os::raw::c_int,
        max_height: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_wbu_motion_new"]
    pub fn wbu_motion_new(filename: *const ::std::os::raw::c_char) -> WbMotionRef;
}
extern "C" {
    #[link_name = "\u{1}_wbu_motion_delete"]
    pub fn wbu_motion_delete(motion: WbMotionRef);
}
extern "C" {
    #[link_name = "\u{1}_wbu_motion_play"]
    pub fn wbu_motion_play(motion: WbMotionRef);
}
extern "C" {
    #[link_name = "\u{1}_wbu_motion_stop"]
    pub fn wbu_motion_stop(motion: WbMotionRef);
}
extern "C" {
    #[link_name = "\u{1}_wbu_motion_set_loop"]
    pub fn wbu_motion_set_loop(motion: WbMotionRef, loop_: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wbu_motion_set_reverse"]
    pub fn wbu_motion_set_reverse(motion: WbMotionRef, reverse: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wbu_motion_is_over"]
    pub fn wbu_motion_is_over(motion: WbMotionRef) -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wbu_motion_get_duration"]
    pub fn wbu_motion_get_duration(motion: WbMotionRef) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wbu_motion_get_time"]
    pub fn wbu_motion_get_time(motion: WbMotionRef) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wbu_motion_set_time"]
    pub fn wbu_motion_set_time(motion: WbMotionRef, time: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wbu_system_getenv"]
    pub fn wbu_system_getenv(
        variable: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wbu_system_short_path"]
    pub fn wbu_system_short_path(
        path: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
pub const WbuCarType_WBU_CAR_TRACTION: WbuCarType = 0;
pub const WbuCarType_WBU_CAR_PROPULSION: WbuCarType = 1;
pub const WbuCarType_WBU_CAR_FOUR_BY_FOUR: WbuCarType = 2;
pub type WbuCarType = u32;
pub const WbuCarEngineType_WBU_CAR_COMBUSTION_ENGINE: WbuCarEngineType = 0;
pub const WbuCarEngineType_WBU_CAR_ELECTRIC_ENGINE: WbuCarEngineType = 1;
pub const WbuCarEngineType_WBU_CAR_PARALLEL_HYBRID_ENGINE: WbuCarEngineType = 2;
pub const WbuCarEngineType_WBU_CAR_POWER_SPLIT_HYBRID_ENGINE: WbuCarEngineType = 3;
pub type WbuCarEngineType = u32;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_FRONT_RIGHT: WbuCarWheelIndex = 0;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_FRONT_LEFT: WbuCarWheelIndex = 1;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_REAR_RIGHT: WbuCarWheelIndex = 2;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_REAR_LEFT: WbuCarWheelIndex = 3;
pub const WbuCarWheelIndex_WBU_CAR_WHEEL_NB: WbuCarWheelIndex = 4;
pub type WbuCarWheelIndex = u32;
extern "C" {
    #[link_name = "\u{1}_wbu_car_init"]
    pub fn wbu_car_init();
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_cleanup"]
    pub fn wbu_car_cleanup();
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_type"]
    pub fn wbu_car_get_type() -> WbuCarType;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_engine_type"]
    pub fn wbu_car_get_engine_type() -> WbuCarEngineType;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_set_indicator_period"]
    pub fn wbu_car_set_indicator_period(period: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_indicator_period"]
    pub fn wbu_car_get_indicator_period() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_backwards_lights"]
    pub fn wbu_car_get_backwards_lights() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_brake_lights"]
    pub fn wbu_car_get_brake_lights() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_track_front"]
    pub fn wbu_car_get_track_front() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_track_rear"]
    pub fn wbu_car_get_track_rear() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_wheelbase"]
    pub fn wbu_car_get_wheelbase() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_front_wheel_radius"]
    pub fn wbu_car_get_front_wheel_radius() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_rear_wheel_radius"]
    pub fn wbu_car_get_rear_wheel_radius() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_wheel_encoder"]
    pub fn wbu_car_get_wheel_encoder(wheel_index: WbuCarWheelIndex) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_wheel_speed"]
    pub fn wbu_car_get_wheel_speed(wheel_index: WbuCarWheelIndex) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_right_steering_angle"]
    pub fn wbu_car_get_right_steering_angle() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_get_left_steering_angle"]
    pub fn wbu_car_get_left_steering_angle() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_enable_limited_slip_differential"]
    pub fn wbu_car_enable_limited_slip_differential(enable: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wbu_car_enable_indicator_auto_disabling"]
    pub fn wbu_car_enable_indicator_auto_disabling(enable: ::std::os::raw::c_char);
}
pub use self::WbuCarEngineType as wbu_car_engine_type;
pub use self::WbuCarType as wbu_car_type;
pub use self::WbuCarWheelIndex as wbu_car_wheel_index;
pub const WbuDriverIndicatorState_OFF: WbuDriverIndicatorState = 0;
pub const WbuDriverIndicatorState_RIGHT: WbuDriverIndicatorState = 1;
pub const WbuDriverIndicatorState_LEFT: WbuDriverIndicatorState = 2;
pub type WbuDriverIndicatorState = u32;
pub const WbuDriverControlMode_SPEED: WbuDriverControlMode = 0;
pub const WbuDriverControlMode_TORQUE: WbuDriverControlMode = 1;
pub type WbuDriverControlMode = u32;
pub const WbuDriverWiperMode_DOWN: WbuDriverWiperMode = 0;
pub const WbuDriverWiperMode_SLOW: WbuDriverWiperMode = 1;
pub const WbuDriverWiperMode_NORMAL: WbuDriverWiperMode = 2;
pub const WbuDriverWiperMode_FAST: WbuDriverWiperMode = 3;
pub type WbuDriverWiperMode = u32;
extern "C" {
    #[link_name = "\u{1}_wbu_driver_init"]
    pub fn wbu_driver_init();
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_cleanup"]
    pub fn wbu_driver_cleanup();
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_step"]
    pub fn wbu_driver_step() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_steering_angle"]
    pub fn wbu_driver_set_steering_angle(steering_angle: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_steering_angle"]
    pub fn wbu_driver_get_steering_angle() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_cruising_speed"]
    pub fn wbu_driver_set_cruising_speed(speed: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_target_cruising_speed"]
    pub fn wbu_driver_get_target_cruising_speed() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_current_speed"]
    pub fn wbu_driver_get_current_speed() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_throttle"]
    pub fn wbu_driver_set_throttle(throttle: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_throttle"]
    pub fn wbu_driver_get_throttle() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_brake_intensity"]
    pub fn wbu_driver_set_brake_intensity(intensity: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_brake_intensity"]
    pub fn wbu_driver_get_brake_intensity() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_indicator"]
    pub fn wbu_driver_set_indicator(state: WbuDriverIndicatorState);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_hazard_flashers"]
    pub fn wbu_driver_set_hazard_flashers(state: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_indicator"]
    pub fn wbu_driver_get_indicator() -> WbuDriverIndicatorState;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_hazard_flashers"]
    pub fn wbu_driver_get_hazard_flashers() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_dipped_beams"]
    pub fn wbu_driver_set_dipped_beams(state: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_antifog_lights"]
    pub fn wbu_driver_set_antifog_lights(state: ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_dipped_beams"]
    pub fn wbu_driver_get_dipped_beams() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_antifog_lights"]
    pub fn wbu_driver_get_antifog_lights() -> ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_rpm"]
    pub fn wbu_driver_get_rpm() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_gear"]
    pub fn wbu_driver_get_gear() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_gear"]
    pub fn wbu_driver_set_gear(gear: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_gear_number"]
    pub fn wbu_driver_get_gear_number() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_control_mode"]
    pub fn wbu_driver_get_control_mode() -> WbuDriverControlMode;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_wiper_mode"]
    pub fn wbu_driver_set_wiper_mode(mode: WbuDriverWiperMode);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_wiper_mode"]
    pub fn wbu_driver_get_wiper_mode() -> WbuDriverWiperMode;
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_brake"]
    pub fn wbu_driver_set_brake(brake: f64);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_brake"]
    pub fn wbu_driver_get_brake() -> f64;
}
pub use self::WbuDriverControlMode as wbu_control_mode;
pub use self::WbuDriverIndicatorState as wbu_indicator_state;
pub use self::WbuDriverWiperMode as wbu_wipers_mode;
extern "C" {
    #[link_name = "\u{1}_wbu_driver_set_wipers_mode"]
    pub fn wbu_driver_set_wipers_mode(mode: wbu_wipers_mode);
}
extern "C" {
    #[link_name = "\u{1}_wbu_driver_get_wipers_mode"]
    pub fn wbu_driver_get_wipers_mode() -> wbu_wipers_mode;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
